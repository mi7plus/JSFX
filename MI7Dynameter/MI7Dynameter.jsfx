desc:MI7Dynameter
//author: mi7plus

slider1:300<50,5000,1.0>RMS Window (ms) (user input)
slider2:-44<-44,-3,0.1>-RMS Meter Min (dB) (user input)
slider3:0<-44,3,0.1>-RMS Window Current L (dB)
slider4:0<-44,3,0.1>-RMS Window Min L (dB)
slider5:0<-44,3,0.1>-RMS Window Max L (dB)
slider6:0<0,18,0.1>-RMS Dynamic Range L (dB)
slider7:0<-44,3,0.1>-RMS Window Current R (dB)
slider8:0<-44,3,0.1>-RMS Window Min R (dB)
slider9:0<-44,3,0.1>-RMS Window Max R (dB)
slider10:0<0,18,0.1>-RMS Dynamic Range R (dB)
slider11:0<-44,3,0.1>-Peak L (dB)
slider12:0<-44,3,0.1>-Peak R (dB)
slider13:0<-44,3,0.1>-RMS Total Loudness L (dB)
slider14:0<-44,3,0.1>-RMS Total Loudness R (dB)
slider15:0<-1,1,0.0001>-DC Offset L
slider16:0<-1,1,0.0001>-DC Offset R
slider17:0<0,20,0.1>-PSR L (dB)
slider18:0<0,20,0.1>-PSR R (dB)
slider19:0<0,20,0.1>-PSR Total (dB)
slider20:11<0,20,0.1>Target Red (dB)
slider21:13<0,20,0.1>Target Yellow (dB)
slider22:15<0,20,0.1>Target Green (dB)
slider23:17<0,20,0.1>Target Blue (dB)

slider24:Cuts=4<0,4,1>-Cuts

in_pin:left input
in_pin:right input
out_pin:none

@init

targetRed = slider20;
targetYellow = slider21;
targetGreen = slider22;
targetBlue = slider23;

M = 300;
bandW = 5;
bandA = 0.4;
PSR = 0;
myBuffer = 0;
a= 0;
lastBufferIndex = 1;
while(
         a += 1;
         myBuffer[a] = 0;
         a < M; // as long as a is below 1000, we go again.
);
 
AMP_dB = 8.6562;
DB_MAX = 0.0;

GFX_RANGE_L = 0.05;
GFX_RANGE_R = 0.95;
GFX_RANGE_H = 0.23;
GFX_RANGE_Y = 0.15;

GFX_PEAK_W = 0.02;
GFX_PEAK_H = 0.03;
GFX_PEAK_Y = 0.07;
GFX_CUR_Y = 0.08;

GFX_SUM_W = 0.02;
GFX_SUM_H = 0.03;
GFX_SUM_Y = GFX_RANGE_Y+GFX_RANGE_H+0.04;

GFX_METER_MAJ_Y = 0.47;
GFX_METER_MIN_Y = 0.49;

prevGfxW = 0;

densityBufN = 2048;  // Something over the maximum screen width.
densityBufL = 0;
densityBufR = densityBufL + densityBufN;
bufL = densityBufR + densityBufN;
bufR = bufL + 131072;  // Something over the max # of samples in the RMS window.

winMS = slider1;
holdIdx = bufN = (0.001*winMS*srate)|0;
nSamples = playing = 0;
bufOK = bufIdx = initBuf = 0;
peakL = peakR = ampEnvL = ampEnvR = 0.0;
sumL = sumR = sum2L = sum2R = win2L = win2R = 0.0;
win2LMin = win2LMax = win2RMin = win2RMax = 0.0;
memset(densityBufL, 0, densityBufN);
memset(densityBufR, 0, densityBufN);
maxDensityL = maxDensityR = 0.0;

function drawLine(x1, y1, x2, y2)
  local(dx, dy, x, smooth)
  global(gfx_x, gfx_y)
  instance()
  (
    smooth = 1;
    x1 = floor(x1);
    x2 = floor(x2);
    gfx_x=x1;
    gfx_y=y1;
    x2 = floor(x2);
    y2 = floor(y2);
    
    smooth ? (
      (x2 - x1) > 4 ? (
        dx = 1.0/(x2-x1);
        dy = (y2 - y1)*6*dx;
        x = 0;
        loop(x2-x1,
          x2 = x1 + 1;
          y2 = y1 + dy * ( x - x*x );

          gfx_line(x1-1, y1-1, x2-1, y2-1, 1);          
          gfx_line(x1, y1-1, x2, y2-1, 1);
          gfx_lineto(x2,y2,1);
          x1 = x2;
          y1 = y2;
          x = x + dx;
        );
      ) : (
        gfx_line(x1, y1-1, x2, y2-1, 1);
        gfx_lineto(x2,y2,1);
      );
    ) : (
      gfx_line(x1, y1-1, x2, y2-1, 1);
      gfx_lineto(x2,y2,1); 
    );
  );

bandClickRange = 10;

function clamp(value, mini, maxi)
  local()
  global()
  (
    max(min(value,maxi),mini)
  );
  
function handleBandKnob(left, double, default, ncap)
  instance(x, y, r, slider_idx, over, xmin, xmax, ymin, ymax)
  local(dx, dy)
  global(mouse_x, mouse_y, dragging, cap)
  (
    dx = (mouse_x - x);
    dy = (mouse_y - y);
    over = ((dx * dx + dy * dy) < (r * r));
    
    // Do we have bnd constraints?
    (xmin > 0) ? (
      over &= ((mouse_x > xmin) && (mouse_x < xmax) && (mouse_y > ymin) && (mouse_y < ymax))
    );
    
    (left || double) ? (
      over ? (
        double ? (
          slider(slider_idx) = default;
        ) : (
          dragging = slider_idx; cap = ncap;
        );
      );
    );
    
    over
  );

function handleCappedBandKnob(dy, mini, maxi, all)
instance()
global(dragging)
local(ix)
(
  (all > 0) ? (
    ix = 0;
    loop(5,
      slider(all + ix) = clamp(slider(all + ix) - dy, mini, maxi);
      ix += 1;
    );
  ) : (
    slider(dragging) = clamp(slider(dragging) - dy, mini, maxi);
  );
);

function isOver(mx, my)
  instance(x, y, w, h)
  global(overRange)
  local()
  (
    ( ( mx >= (x-overRange) ) && ( mx <= (x+w+overRange) ) && ( my >= (y-overRange) ) && ( my <= (y+h+overRange) ) ) ? 1 : 0;
  );
  
function isOverCircle(mx, my)
  instance(x, y, w, h)
  global(overRangeCircle)
  local()
  (
    ( ( mx >= (x-overRangeCircle) ) && ( mx <= (x+w+overRangeCircle) ) && ( my >= (y-overRangeCircle) ) && ( my <= (y+h+overRangeCircle) ) ) ? 1 : 0;
  );

function overRect(x, y, w, h, mx, my)
  local()
  global()
  (
    ( (mx > x) && (mx < (x+w) ) && (my > y) && (my < (y+h) ) )
  );
  
function bandcap(y1, y2)
  global(cap, mouse_y)
  local()
  (
    (mouse_y < y1) ? (
      cap = 5;
    ) : (mouse_y > y2) ? (
      cap = 7;
    ) : (
      cap = 6;
    );
  );
 
  
function drawGroupRect(x, y, w, h, r, g, b, a)  
  local()
  instance()
  global()
  (
    gfx_set(r, g, b, a);
    gfx_line(x, y, x+w, y);
    gfx_line(x, y, x, y+h);
    gfx_line(x+w, y, x+w, y+h);
    gfx_line(x, y+h, x+w, y+h);
    
    gfx_set(r, g, b, a*.5);
    gfx_line(x, y+h+1, x+w, y+h+1);
    gfx_line(x+w+1, y, x+w+1, y+h);
  );  
  
  function red()
  global(lineR, lineG, lineB, lineA, lineHighlightR, lineHighlightG, lineHighlightB)
  (
    lineR = 1;
    lineG = .2;
    lineB = .1;
    lineA = 0.7;
    lineHighlightR = 1;
    lineHighlightG = .2;
    lineHighlightB = .1;
  );
  
function fancyLineV(x1, y1, x2, y2)
    local(dx)
    global(globalTime, lineR, lineG, lineB, lineA, lineHighlightR, lineHighlightG, lineHighlightB)
    instance(x, y, w, h, over)
    (
      dx = 5;
      red();
      x = x1 - .5*dx;
      y = y1;
      w = dx;
      h = y2-y1;
    
      over ? ( 
        gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.1);
        gfx_rect(x-2, y, w+5, h);
        gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.1);
        gfx_rect(x-4, y, w+9, h);
        gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.05);
        gfx_rect(x-7, y, w+15, h);
        gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.03);
        gfx_rect(x-10, y, w+20, h);
      );
    
      gfx_set(.2*lineR, .2*lineG, .2*lineB, lineA);
      gfx_rect(x, y, w, h);
      
      gfx_set(.2*lineR, .2*lineG, .2*lineB, .2*lineA);
      dx = 8; gfx_rect(x1 - .5*dx, y1, dx, y2-y1);
      gfx_set(.2*lineR, .2*lineG, .2*lineB, .2*lineA);
      dx = 12; gfx_rect(x1 - .5*dx, y1, dx, y2-y1);
      
      gfx_set(.5*lineR, .5*lineG, .5*lineB, lineA);
      dx = 3; gfx_rect(x1 - .5*dx, y1, dx, y2-y1);
      gfx_set(.7*lineR, .7*lineG, .7*lineB, lineA);
      dx = 2; gfx_rect(x1 - .5*dx, y1, dx, y2-y1);
      gfx_set(lineR, lineG, lineB, lineA);
      dx = 1; gfx_rect(x1 - .5*dx, y1, dx, y2-y1);
      
      over ? ( 
        gfx_set(1,.3,0,.4*abs(sin(2*globalTime)));
        gfx_rect(x, y, w, h);
      );
      
      over = 0;
    );
   
  
@slider
 
dbMin = slider2;
targetRed = slider20;
targetYellow = slider21;
targetGreen = slider22;
targetBlue = slider23;
(slider1 != winMS) ? (
  winMS = slider1;
  dbRange = DB_MAX - dbMin;
  holdIdx = bufN = (0.001*winMS*srate)|0;
  bufOK = bufIdx = initBuf = 0;
  ampEnvCoeff = exp(-1.0/bufN);
  nSamples = playing = 0;
  bufOK = bufIdx = initBuf = 0;
  peakL = peakR = ampEnvL = ampEnvR = 0.0;
  sumL = sumR = sum2L = sum2R = win2L = win2R = 0.0;
  win2LMin = win2LMax = win2RMin = win2RMax = 0.0;
  memset(densityBufL, 0, densityBufN);
  memset(densityBufR, 0, densityBufN);
  maxDensityL = maxDensityR = 0.0;
)
 
@block

(playing && bufOK) ? (
  slider3 = floor(dbRMSL*100.0)/100.0;
  slider4 = floor(AMP_DB*log(sqrt(win2LMin/bufN))*100.0)/100.0;
  slider5 = floor(AMP_DB*log(sqrt(win2LMax/bufN))*100.0)/100.0;
  slider6 = slider5-slider4;
  
  slider7 = floor(dbRMSR*100.0)/100.0;
  slider8 = floor(AMP_DB*log(sqrt(win2RMin/bufN))*100.0)/100.0;
  slider9 = floor(AMP_DB*log(sqrt(win2RMax/bufN))*100.0)/100.0;
  slider10 = slider9-slider8;
  
  slider11 = floor(AMP_DB*log(peakL)*100.0)/100.0;
  slider12 = floor(AMP_DB*log(peakR)*100.0)/100.0;
  
  slider13 = floor(AMP_DB*log(sqrt(sum2L/nSamples))*100.0)/100.0;
  slider14 = floor(AMP_DB*log(sqrt(sum2R/nSamples))*100.0)/100.0;
  
  slider15 = sumL/nSamples;
  slider16 = sumR/nSamples;
  psrL = slider11 - dbRMSL;
  psrR = slider12 - dbRMSR;
  
  // Update PSR sliders
  slider17 = floor(psrL*100.0)/100.0;
  slider18 = floor(psrR*100.0)/100.0;
  // Calculate total PSR
  psrTotal = max(psrL, psrR); // You can also use min or average depending on your preference
  slider19 = floor(psrTotal*100.0)/100.0;
    
  (lastBufferIndex < M)?(
    lastBufferIndex += 1;
    myBuffer[lastBufferIndex] = slider19;
  ) : (
    ss = 0;
    while(
             ss += 1;
             myBuffer[ss] =  myBuffer[ss+1];
             ss < M;
    );
    myBuffer[M] =  floor(psrTotal*100.0)/100.0;
  );
     
);

(play_state == 1) ? (
  playing = 1;
) : (
  playing = 0;
);

@sample

(playing) ? (
  (holdIdx) ? (
    holdIdx -= 1;
  ) : (
    nSamples += 1;
     
    sumL += spl0;
    sumR += spl1;
    
    ampL = abs(spl0);
    ampR = abs(spl1);
     
    peakL = max(peakL, ampL);
    peakR = max(peakR, ampR);
    
    (ampL > ampEnvL) ? (
      ampEnvL = ampL;
    ) : (
      ampEnvL = ampL + ampEnvCoeff * (ampEnvL - ampL);
    );
     (ampR > ampEnvR) ? (
      ampEnvR = ampR;
    ) : (
      ampEnvR = ampR + ampEnvCoeff * (ampEnvR - ampR);
    ); 
     
    amp2L = ampL*ampL;
    amp2R = ampR*ampR;
    sum2L += amp2L;
    sum2R += amp2R;
    win2L += amp2L;
    win2R += amp2R;

    prev2L = bufL[bufIdx];
    prev2R = bufR[bufIdx];
    bufL[bufIdx] = amp2L;
    bufR[bufIdx] = amp2R;

    bufIdx += 1;
    (bufIdx == bufN) ? (
      bufIdx = 0;
      (!bufOK) ? (
        win2LMin = win2LMax = win2L;
        win2RMin = win2RMax = win2R;
        bufOK = 1;
      );
    );

    (bufOK) ? (
      win2LMin = min(win2LMin, win2L);
      win2LMax = max(win2LMax, win2L);
      win2RMin = min(win2RMin, win2R);
      win2RMax = max(win2RMax, win2R);
      win2L -= prev2L;
      win2R -= prev2R;      

      dbRMSL = AMP_DB*log(sqrt(win2L/bufN));
      dbRMSLX = min(max((dbRMSL-dbMin)/dbRange, 0.0), 1.0);
      densityIdx = floor(dbRMSLX*(densityBufN-1));
      densityBufL[densityIdx] += 1;
      maxDensityL = max(maxDensityL, densityBufL[densityIdx]);
      
      dbRMSR = AMP_DB*log(sqrt(win2R/bufN));
      dbRMSRX = min(max((dbRMSR-dbMin)/dbRange, 0.0), 1.0);
      densityIdx = floor(dbRMSRX*(densityBufN-1));
      densityBufR[densityIdx] += 1;
      maxDensityR = max(maxDensityR, densityBufR[densityIdx]);    
    );
  );
);
 
@gfx 800 200

  globalTime = time_precise();
  delta_time = globalTime - lastGlobalTime;
  lastGlobalTime = globalTime;

(gfx_w != prevGfxW) ? (
  prevGfxW = gfx_w;
  rangeL = floor(gfx_w*GFX_RANGE_L);
  rangeR = floor(gfx_w*GFX_RANGE_R);
  rangeW = rangeR-rangeL;
  rangeH = floor(gfx_h);
  rangeY = floor(gfx_h);
  peakW = floor(gfx_w*GFX_PEAK_W);
  peakH = floor(gfx_h*GFX_PEAK_H);
  peakY = floor(gfx_h*GFX_PEAK_Y);
  curY = floor(gfx_h*GFX_CUR_Y);
  sumW = floor(gfx_w*GFX_SUM_W);
  sumH = floor(gfx_h*GFX_SUM_H);
  sumY = floor(gfx_h*GFX_SUM_Y);
  meterMajY = floor(gfx_h*GFX_METER_MAJ_Y);
  meterMinY = floor(gfx_h*GFX_METER_MIN_Y);
);  

// Frame elements.

gfx_r = gfx_g = gfx_b = gfx_a = 1.0;


gfx_a = bandA;

gfx_r = 1; gfx_g = 0; gfx_b = 0;
gfx_x = rangeW/2-targetRed*10;
gfx_y = 1;
gfx_rectto(gfx_x-bandW, M*2);
gfx_x = rangeW/2+targetRed*10;
gfx_y = 1;
gfx_rectto(gfx_x+bandW, M*2);



gfx_r = 1; gfx_g = 0.6; gfx_b = 0;
gfx_x = rangeW/2-targetYellow*10;
gfx_y = 1;
gfx_rectto(gfx_x-bandW, M*2);
gfx_x = rangeW/2+targetYellow*10;
gfx_y = 1;
gfx_rectto(gfx_x+bandW, M*2);

gfx_r = 0; gfx_g = 1; gfx_b = 0;
gfx_x = rangeW/2-targetGreen*10;
gfx_y = 1;
gfx_rectto(gfx_x-bandW, M*2);
gfx_x = rangeW/2+targetGreen*10;
gfx_y = 1;
gfx_rectto(gfx_x+bandW, M*2);

gfx_r = 0; gfx_g = 0; gfx_b = 1;
gfx_x = rangeW/2-targetBlue*10;
gfx_y = 1;
gfx_rectto(gfx_x-bandW, M*2);
gfx_x = rangeW/2+targetBlue*10;
gfx_y = 1;
gfx_rectto(gfx_x+bandW, M*2);

gfx_a = 1;

(!bufOK && playing) ? (
      gfx_x = 20;
      gfx_y = 20;
      gfx_drawstr("LOADING");  
);

  // Current RMS lines.

  gfx_r = gfx_g = gfx_b = 1.0;
  
  TT = 0;
  while(
           TT += 1;
           
             gfx_r = 1-(myBuffer[TT] - targetBlue)/(20 - targetBlue);
             gfx_b = 1-(myBuffer[TT] - targetBlue)/(20 - targetBlue); 
             gfx_g = 0.0;
             myBuffer[TT] <= targetBlue ? 
             (
                gfx_r = 0.0; 
                gfx_b = (myBuffer[TT] - targetGreen)/(targetBlue - targetGreen); 
                gfx_g = 1-(myBuffer[TT] - targetGreen)/(targetBlue - targetGreen);
              );
             myBuffer[TT] <= targetGreen ? 
             ( 
                gfx_r = 0.1; 
                gfx_g = 1-(myBuffer[TT] - targetYellow)/(targetGreen - targetYellow)/2; 
                gfx_b = (myBuffer[TT] - targetYellow)/(targetGreen - targetYellow);
              );
             myBuffer[TT] <= targetYellow ? 
             (
                gfx_r = 1; 
                gfx_g = (myBuffer[TT] - targetRed)/(targetYellow - targetRed); 
                gfx_b = 0.0;
              );
             myBuffer[TT] <= targetRed ? 
             (
                gfx_r = (myBuffer[TT])/(targetRed);
                gfx_b = 0.0; 
                gfx_g = 0.0;
              );
             myBuffer[TT] > 20 ? (
                gfx_x = 1;
                gfx_y = TT*2;
             ) :(
               gfx_x = rangeW/2;
               gfx_y = TT*2;
               gotox = gfx_x + (myBuffer[TT])*10;
               gotox >= rangeW ? gotox = rangeW;
               gfx_rectto(gotox, gfx_y+1);
               gfx_x = rangeW/2;
               gfx_y = TT*2;
               prev_x = rangeW/2- (myBuffer[TT])*10;
               prev_x <= 0 ? prev_x = 10;
               gfx_x = prev_x;
               gfx_rectto(rangeW/2+1, gfx_y+1);
             );
        
           TT < M;
  );
   
  
  gfx_r = gfx_g = gfx_b = 0.0;
  gfx_x = 0;
  gfx_y = M*2 + 2;
  gfx_rectto(rangeW, gfx_y+40);

gfx_r = gfx_g = gfx_b = 1.0;

zz = 4;

 while(
          zz += 2;
          gfx_x = rangeW/2 + zz*10-1;
          gfx_y = M*2 +18;
          gfx_rectto(gfx_x+1, gfx_y-10);
          gfx_x = rangeW/2 + zz*10-4;
          gfx_y = M*2 +22;
          gfx_drawnumber(zz,0);
          gfx_x = rangeW/2 - zz*10-1;
          gfx_y = M*2 +18;
          gfx_rectto(gfx_x+1, gfx_y-10);
          gfx_x = rangeW/2 - zz*10-4;
          gfx_y = M*2 +22;
          gfx_drawnumber(zz,0);
          zz < 20;
 );
 
 
 gfx_x = rangeW/2 - 12;
 gfx_y = M*2 +20;
 gfx_drawnumber(psrTotal,2);
 
 gfx_r = 1-(myBuffer[M] - targetBlue)/(20 - targetBlue);
 gfx_b = 1-(myBuffer[M] - targetBlue)/(20 - targetBlue); 
 gfx_g = 0.0;
 myBuffer[M] <= targetBlue ? 
 (
    gfx_r = 0.0; 
    gfx_b = (myBuffer[M] - targetGreen)/(targetBlue - targetGreen); 
    gfx_g = 1-(myBuffer[M] - targetGreen)/(targetBlue - targetGreen);
  );
 myBuffer[M] <= targetGreen ? 
 ( 
    gfx_r = 0.1; 
    gfx_g = 1-(myBuffer[M] - targetYellow)/(targetGreen - targetYellow)/2; 
    gfx_b = (myBuffer[M] - targetYellow)/(targetGreen - targetYellow);
  );
 myBuffer[M] <= targetYellow ? 
 (
    gfx_r = 1; 
    gfx_g = (myBuffer[M] - targetRed)/(targetYellow - targetRed); 
    gfx_b = 0.0;
  );
 myBuffer[M] <= targetRed ? 
 (
    gfx_r = (myBuffer[M])/(targetRed);
    gfx_b = 0.0; 
    gfx_g = 0.0;
  );
  
   gfx_x = rangeW/2;
   gfx_y = M*2+2;
   gotox = gfx_x + (myBuffer[M])*10;
   gotox >= rangeW ? gotox = rangeW;
   gfx_rectto(gotox, gfx_y+10);
   gfx_x = rangeW/2;
   gfx_y = M*2+2;
   prev_x = rangeW/2- (myBuffer[M])*10;
   prev_x <= 0 ? prev_x = 10;
   gfx_x = prev_x;
   gfx_rectto(rangeW/2+1, gfx_y+10);
 
 

 
 

